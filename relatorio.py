# Importa o m√≥dulo 'os', utilizado para executar comandos do sistema operacional, como limpar a tela do terminal.
import os

# Importa a classe 'datetime' do m√≥dulo 'datetime', usada para manipula√ß√£o de datas e horas.
from datetime import datetime

# Importa fun√ß√µes e constantes da biblioteca colorama para colorir textos no terminal.
from colorama import Fore, Style, init

# Importa a classe Database do m√≥dulo banco, respons√°vel pela conex√£o e opera√ß√µes com o banco de dados.
from banco import Database

# Importa o dicion√°rio usuario_logado do m√≥dulo sessao, que armazena informa√ß√µes do usu√°rio autenticado.
from sessao import usuario_logado

# Inicializa o colorama para que as cores sejam resetadas automaticamente ap√≥s cada print.
init(autoreset=True) 

# Fun√ß√£o para limpar a tela do terminal, tornando a interface mais amig√°vel.
def limpar_tela():
    # Se o sistema operacional for Windows, executa 'cls', sen√£o executa 'clear' (Linux/Mac).
    os.system('cls' if os.name == 'nt' else 'clear')

# Fun√ß√£o que calcula a pontua√ß√£o do consumo de √°gua.
# Par√¢metro: valor (float) - quantidade de √°gua consumida em litros.
def pontuar_agua(valor):
    if valor <= 100: return 100  # Consumo excelente.
    if valor <= 150: return 80   # Consumo bom.
    if valor <= 200: return 60   # Consumo razo√°vel.
    if valor <= 250: return 40   # Consumo alto.
    if valor <= 300: return 20   # Consumo muito alto.
    if valor > 300: return 0     # Consumo excessivo.

# Fun√ß√£o que calcula a pontua√ß√£o do consumo de energia el√©trica.
# Par√¢metro: valor (float) - quantidade de energia consumida em kWh.
def pontuar_energia(valor):
    if valor <= 4: return 100    # Consumo excelente.
    if valor <= 6: return 80     # Consumo bom.
    if valor <= 9: return 60     # Consumo razo√°vel.
    if valor <= 12: return 40    # Consumo alto.
    if valor <= 15: return 20    # Consumo muito alto.
    if valor > 15: return 0      # Consumo excessivo.

# Fun√ß√£o que calcula a pontua√ß√£o do descarte de lixo.
# Par√¢metros:
#   org (float): quantidade de lixo org√¢nico.
#   rec (float): quantidade de lixo recicl√°vel.
def pontuar_lixo(org, rec):
    total = org + rec  # Soma o total de lixo produzido.
    if total == 0: return 100  # Se n√£o produziu lixo, pontua√ß√£o m√°xima.
    proporcao = rec / total  # Calcula a propor√ß√£o de lixo recicl√°vel.
    if proporcao >= 0.8: return 100  # Excelente reciclagem.
    if proporcao >= 0.5: return 80   # Boa reciclagem.
    if proporcao >= 0.3: return 50   # Reciclagem razo√°vel.
    return 20                        # Reciclagem baixa.

# Fun√ß√£o que calcula a pontua√ß√£o do tipo de transporte utilizado.
# Par√¢metro: tipo (str) - tipo de transporte (sustent√°vel, misto ou poluente).
def pontuar_transporte(tipo):
    if tipo == "sustent√°vel": return 100  # Transporte sustent√°vel.
    if tipo == "misto": return 60         # Transporte misto.
    return 20                             # Transporte poluente ou outro.

# Fun√ß√£o que classifica a pontua√ß√£o m√©dia do dia em tr√™s categorias.
# Par√¢metro: pontuacao (int) - valor da pontua√ß√£o m√©dia.
# Retorna uma tupla com a classifica√ß√£o textual e a cor correspondente.
def classificar(pontuacao):
    if pontuacao >= 80:
        return "Excelente üå±", Fore.GREEN
    elif pontuacao >= 50:
        return "Moderado üåø", Fore.YELLOW
    else:
        return "Ruim üî•", Fore.RED

# Fun√ß√£o que gera uma barra de progresso em ASCII para representar a pontua√ß√£o.
# Par√¢metro: valor (int) - pontua√ß√£o de 0 a 100.
def gerar_barra(valor):
    blocos = int((valor / 100) * 50)  # Calcula quantos blocos preencher (m√°ximo 50).
    return '‚ñá' * blocos + f" {valor}"

# Fun√ß√£o principal que exibe o relat√≥rio do dia selecionado pelo usu√°rio.
def relatorio_do_dia():
    limpar_tela()  # Limpa a tela antes de exibir o relat√≥rio.

    # T√≠tulo em ASCII estilizado, exibido em verde e negrito.
    titulo_ascii = Fore.GREEN + Style.BRIGHT + r"""
______     _       _             _           
| ___ \   | |     | |           (_)          
| |_/ /___| | __ _| |_ ___  _ __ _  ___  ___ 
|    // _ \ |/ _` | __/ _ \| '__| |/ _ \/ __|
| |\ \  __/ | (_| | || (_) | |  | | (_) \__ \
\_| \_\___|_|\__,_|\__\___/|_|  |_|\___/|___/
"""
    print(titulo_ascii)

    # Exibe op√ß√µes para o usu√°rio escolher a data do relat√≥rio.
    print(Fore.YELLOW + Style.BRIGHT + "Deseja ver o relat√≥rio de qual dia?\n")
    print(Fore.CYAN + """
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ [1] Relat√≥rio de hoje       ‚îÇ
‚îÇ [2] Relat√≥rio de outro dia  ‚îÇ
‚îÇ [0] Voltar                  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
""")
    opcao = input(Fore.CYAN + "‚Üí Escolha: ").strip()

    # Bloco de controle de fluxo para determinar a data do relat√≥rio.
    if opcao == "1":
        data = datetime.now().date()  # Usa a data de hoje.
    elif opcao == "2":
        while True:
            data_str = input("Digite a data (dd/mm/aaaa): ").strip()
            try:
                data = datetime.strptime(data_str, "%d/%m/%Y").date()
                break
            except ValueError:
                print(Fore.RED + "Data inv√°lida. Tente novamente.")
    else:
        print(Fore.RED + "Op√ß√£o inv√°lida.")
        return

    # Verifica se o usu√°rio tem registro para a data escolhida.
    db = Database()
    resultado = db.fetchone(
        "SELECT water, energy, organic_waste, recyclable_waste, transport FROM tb_register WHERE user_id = %s AND date = %s",
        (usuario_logado["id"], data)
    )
    db.close()

    # Se n√£o houver registro, informa o usu√°rio e retorna.
    if not resultado:
        print(Fore.RED + "\nNenhum registro encontrado para essa data.")
        input("Pressione Enter para continuar...")
        return

    # Desempacota os valores do registro retornado do banco.
    water, energy, lixo_org, lixo_rec, transporte = resultado

    # Calcula a pontua√ß√£o de cada categoria usando as fun√ß√µes de pontua√ß√£o.
    p1 = pontuar_agua(water)
    p2 = pontuar_energia(energy)
    p3 = pontuar_lixo(lixo_org, lixo_rec)
    p4 = pontuar_transporte(transporte)
    # Calcula a m√©dia das pontua√ß√µes.
    media = int((p1 + p2 + p3 + p4) / 4)

    limpar_tela()  # Limpa a tela antes de exibir o relat√≥rio detalhado.
    print(Fore.YELLOW + Style.BRIGHT + f"\nPontua√ß√£o do dia {data.strftime('%d/%m/%Y')}:")
    
    # Exibe os dados do registro do dia.
    print(Fore.MAGENTA + f"\nResumo do dia:")
    print(Fore.WHITE + f"- √Ågua: {water:.1f} L")
    print(f"- Energia: {energy:.1f} kWh")
    print(f"- Lixo org√¢nico: {lixo_org:.1f} kg")
    print(f"- Lixo recicl√°vel: {lixo_rec:.1f} kg")
    print(f"- Transporte: {transporte.title()}\n")

    # Exibe barras de pontua√ß√£o para cada categoria.
    print(Fore.BLUE +   f"√Ågua       | {gerar_barra(p1)}")
    print(Fore.YELLOW + f"Energia    | {gerar_barra(p2)}")
    print(Fore.GREEN +  f"Reciclagem | {gerar_barra(p3)}")
    print(Fore.MAGENTA +f"Transporte | {gerar_barra(p4)}")
    print(Fore.CYAN +   f"Geral      | {gerar_barra(media)}")

    # Classifica a pontua√ß√£o geral e define a cor da mensagem.
    classificacao, cor = classificar(media)
    print(cor + Style.BRIGHT + f"\nPontua√ß√£o geral: {media}/100")
    print(cor + Style.BRIGHT + f"Classifica√ß√£o: {classificacao}\n")

    # Mensagem motivacional do urso polar, personalizada conforme a m√©dia do dia.
    if media >= 80:
        mensagem = "Parab√©ns! Seu dia foi incr√≠vel para o planeta! Continue assim! üåé"
    elif media >= 50:
        mensagem = "Bom trabalho! Mas ainda h√° espa√ßo para melhorar. Pequenas atitudes fazem diferen√ßa!"
    else:
        mensagem = "Hoje n√£o foi um bom dia para o meio ambiente... Que tal compensar amanh√£?"

    # Arte ASCII de um urso polar, acompanhada da mensagem motivacional.
    urso_polar_ascii = Fore.WHITE + Style.BRIGHT + rf"""
      .--.              .--.
     : (\\ '. _...._ .' //) : 
      '.    '          '  .'
       /'   _        _   '\
      /     ^        ^     \
     |       /      \       |  --<{mensagem}>
     |     /'        '\     |
      \   |    .--.    |   /
       '._\ '  \__/  ' /_.'
       /  ``...-''-...``  \
"""

    print(Fore.CYAN + Style.BRIGHT + "\nMensagem do Urso Polar üêª‚Äç‚ùÑÔ∏è:")
    print(urso_polar_ascii)

    # Aguarda o usu√°rio pressionar Enter antes de retornar ao menu.
    input("\nPressione Enter para voltar ao menu...")